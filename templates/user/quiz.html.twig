

{% set page = "login" %}
{% extends "base.html.twig" %}

{% block spreadsheets %}
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ asset("css/quiz.css") }}">
    <link rel="stylesheet" href="{{ asset("css/registration.css") }}">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

{% endblock %}

{% block title %}Exam - {{ exam.title }}{% endblock %}

{% block body %}
<!-- start Quiz button -->
    <div class="start_btn"><button>Start Exam</button></div>
    <!-- Info Box -->
    <div class="info_box shadow_container">
        <div class="info-title"><span>Some Rules of this Exam</span></div>
        <div class="info-list">
            <div class="info">1. You will have only <span><span class = "info_seconds"></span> seconds</span> per each question.</div>
            <div class="info">2. Once you select your answer, it can't be undone.</div>
            <div class="info">3. You can't select any option once time goes off.</div>
            <div class="info">4. You can't exit from the Quiz while you're playing. If you do, your data will NOT be saved.</div>
            <div class="info">5. You'll get points on the basis of your correct answers.</div>
        </div>
        <div class="buttons">
            <a href = "{{ path('user_attempts', { 'id': exam.certification.id }) }}" onclick="return confirm('Are you sure you want to exit the exam? Your attempt will NOT be saved.')"><button class="quit">Go back</button></a>
            <button class="restart">Continue</button>
        </div>
    </div>
    <!-- Quiz Box -->
    <div class="quiz_box shadow_container">
        <header>
            <h2 class="uk-tab-title uk-link-bright uk-margin-vertical-none">{{ exam.title }}</h2>
            <div class = "quiz_header">

                <a href = "{{ path('user_attempts', { 'id': exam.certification.id }) }}" onclick="return confirm('Are you sure you want to exit the exam? Your attempt will NOT be saved.')"><button class="exit_btn hide">Exit</button></a>
                
                <button class="signaler_btn hide">Signaler</button>

                <div class="timer">
                    <div class="time_left_txt">Time Left</div>
                    <div class="timer_sec"><span><span class = "info_seconds"></span></div>
                </div>
            </div>
            <div class="time_line"></div>
        </header>
        <section>
            
            <div class="que_text">
                <!-- Here I've inserted question from JavaScript -->
            </div>
            <div class="que_task">
                <!-- Here I've inserted question from JavaScript -->
            </div>
            <div class="option_list">
                <!-- Here I've inserted options from JavaScript -->
            </div>
        </section>
        <!-- footer of Quiz Box -->
        <footer>
            <div class="total_que">
                <!-- Here I've inserted Question Count Number from JavaScript -->
            </div>
            <div class = "navigation_quiz_buttons">
                <button class="ok_btn show">Ok</button>
                <button class="prev_btn">&laquo; Previous</button>
                <button class="next_btn">Next &raquo;</button>
                <button class="finish_btn">Finish</button>
            </div>
        </footer>
    </div>
    <!-- Result Box -->
    <div class="result_box">
        <div class="icon">
            <i class="fas fa-crown"></i>
        </div>
        <div class="complete_text">You've completed the exam!</div>
        <div class="score_text uk-text-center">
            <!-- Here I've inserted Score Result from JavaScript -->
        </div>
        <div class="buttons">
            <button class="check-mistakes">Check Mistakes</button>
            <button class="restart">Try Again</button>
            <a href = "{{ path('user_attempts', { 'id': exam.certification.id }) }}"><button class="quit">Exit</button></a>
        </div>
    </div>
    <!-- Inside this JavaScript file I've inserted Questions and Options only -->
    <!-- Inside this JavaScript file I've coded all Quiz Codes -->

    <script>
    // creating an array and passing the number, questions, options, and answers
let questions = {{ questions|json_encode()|raw }};
let userData = []; // saving user input, counter, counterLine, widthValue, timeValue
let userScore = 0;

//selecting all required elements
const start_btn = document.querySelector(".start_btn button");
const info_box = document.querySelector(".info_box");
const continue_btn = info_box.querySelector(".buttons .restart");
const quiz_box = document.querySelector(".quiz_box");
const signaler_btn = quiz_box.querySelector(".signaler_btn");
const exit_btn = quiz_box.querySelector(".exit_btn");
const result_box = document.querySelector(".result_box");
const check_mistakes_btn = result_box.querySelector(".buttons .check-mistakes");
const option_list = document.querySelector(".option_list");
const time_line = document.querySelector("header .time_line");
const timeText = document.querySelector(".timer .time_left_txt");
const timeCount = document.querySelector(".timer .timer_sec");

// if startQuiz button clicked
start_btn.onclick = ()=>{
    info_box.classList.add("activeInfo"); //show info box
    start_btn.classList.add("hide");
}

const widthValue = 720;
const timeValue = 15;

let info_seconds = document.querySelectorAll(".info_seconds");
for(i=0; i < info_seconds.length; i++) {
    info_seconds[i].textContent = timeValue;
}

let que_count = 0;
let examFinished = false;

let counter;
let counterLine;

let timeLeft;
let widthLeft;

const restart_quiz = result_box.querySelector(".buttons .restart");
const quit_quiz = result_box.querySelector(".buttons .quit");

// if continueQuiz button clicked
continue_btn.onclick = ()=>{
    $(document).ready(function() {
        $.post("{{ path('try_start') }}");
    });

    info_box.classList.remove("activeInfo"); //hide info box
    quiz_box.classList.add("activeQuiz"); //show quiz box
    showQuestions(0); //calling showQestions function
    startTimer(); //calling startTimer function
}

// if continueQuiz button clicked
signaler_btn.onclick = ()=>{
    var msg = window.prompt("What's your reason?"); 

    if (msg != "") {
        $(document).ready(function() {
            $.post("{{ path('user_exam_signaler') }}", {msg: msg}, function( data ) {
                alert(data); 
            });
        });
    } else {
        alert("This field cannot be empty");
    }
}

// if restartQuiz button clicked
restart_quiz.onclick = ()=>{
    window.location.reload();
}

const ok_btn = document.querySelector("footer .ok_btn");
const prev_btn = document.querySelector("footer .prev_btn");
const next_btn = document.querySelector("footer .next_btn");
const finish_btn = document.querySelector("footer .finish_btn");
const bottom_ques_counter = document.querySelector("footer .total_que");

// if Ok Button clicked
ok_btn.onclick = ()=> {
    clearInterval(counter); //clear counter
    clearInterval(counterLine); //clear counterLine
    
    saveData();

    if (que_count > 0) {
        prev_btn.classList.add("show");
    }
    
    if (que_count < questions.length - 1) {
       next_btn.classList.add("show"); //show the next button if user selected any option
    } else {
        finish_btn.classList.add("show"); //show the next button if user selected any option
    }

    ok_btn.classList.remove("show");

    exit_btn.classList.remove("hide");
    signaler_btn.classList.remove("hide");
}


// if Next Que button clicked
prev_btn.onclick = ()=>{
    if(que_count > 0){ //if question count is less than total question length
        showQuestions(--que_count); //calling showQestions function // next question
        loadData();

        if (que_count == 0) {
            prev_btn.classList.remove("show");
        }

        if (que_count+1 == questions.length-1) {
            next_btn.classList.add("show"); //show the next button if user selected any option
            finish_btn.classList.remove("show"); //show the next button if user selected any option
        }

        if (examFinished) {
            checkAnswers();
        }
        
        next_btn.classList.add("fnext_btn");
    }
}

// if Next Que button clicked
next_btn.onclick = ()=>{
    if (userData[++que_count] == null) {
        exit_btn.classList.add("hide");
        signaler_btn.classList.add("hide");

        clearInterval(counter); //clear counter
        clearInterval(counterLine); //clear counterLine

        // user input, counter, counterLine, widthValue, timeValue
        showQuestions(que_count); //calling showQestions function // next question

        startTimer(); //calling startTimer function
        timeText.textContent = "Time Left"; //change the timeText to Time Left

        prev_btn.classList.remove("show"); //hide the prev button
        next_btn.classList.remove("show"); //hide the next button
        ok_btn.classList.add("show"); //hide the next button

    } else {
        showQuestions(que_count); //calling showQestions function // next question
        loadData();

        if (que_count == 1) {
            prev_btn.classList.add("show");
        }

        if (userData[que_count+1] == null) {
            next_btn.classList.remove("fnext_btn");

            if(que_count == questions.length - 1){
                next_btn.classList.remove("show");
                finish_btn.classList.add("show");
            }
        }

        if (examFinished) {
            checkAnswers();
        }
    }
}

// if Finish Que button clicked
finish_btn.onclick = ()=>{
    showResult(); //calling showResult function
}

check_mistakes_btn.onclick = ()=>{
    result_box.classList.remove("activeResult"); //show result box
    info_box.classList.add("activeInfo"); //hide info box
    quiz_box.classList.add("activeQuiz"); //hide quiz box

    que_count = 0;

    prev_btn.classList.remove("show");
    if(que_count < questions.length - 1){
        finish_btn.classList.remove("show");
        next_btn.classList.add("fnext_btn");
        next_btn.classList.add("show");
    }

    showQuestions(que_count); //calling showQestions function // next question
    loadData();
    checkAnswers();
}

// getting questions and options from array
function showQuestions(index){
    const que_title = document.querySelector(".que_text");
    const que_task = document.querySelector(".que_task");
    //creating a new span and div tag for question and option and passing the value using array index
    let que_tag = '<span>' + questions[index].title +'</span>';
    let que_info = '<span>' + questions[index].task + '</span>';
    let option_tag = "";
    for(i=0; i < questions[index].options.length; i++){
        option_tag += '<div class="option"><span>'+ questions[index].options[i].proposition +'</span><div class="icons"></div></div>';
    }

    que_title.innerHTML = que_tag; //adding new span tag inside que_tag
    que_task.innerHTML = que_info; //adding new span tag inside que_tag
    option_list.innerHTML = option_tag; //adding new div tag inside option_tag
    
    const option = option_list.querySelectorAll(".option");

    // set onclick attribute to all available options
    for(i=0; i < option.length; i++){
        option[i].setAttribute("onclick", "optionSelected(this)");
    }

    //creating a new span tag and passing the question number and total question
    let totalQueCounTag = '<span><p>'+ (que_count+1) +'</p> of <p>'+ questions.length +'</p> Questions</span>';
    bottom_ques_counter.innerHTML = totalQueCounTag;  //adding new span tag inside bottom_ques_counter
}

// creating the new div tags which for icons
let selectedIconTag = '<div class="icon pencil"><i class="fa fa-pencil"></i></div>';
let tickIconTag = '<div class="icon tick"><i class="fa fa-check"></i></div>';
let crossIconTag = '<div class="icon cross"><i class="fa fa-times"></i></div>';
let selected_options = 0;

//if user clicked on option
function optionSelected(prop) {
    if (prop.classList.contains("selected")) {
        prop.classList.remove("selected");
        prop.lastElementChild.removeChild(prop.lastElementChild.firstElementChild);
        selected_options--;
        

    } else {
        prop.classList.add("selected");
        prop.lastElementChild.insertAdjacentHTML("beforeend", selectedIconTag); //adding selected icon to correct selected option
        selected_options++;

    }
}

function checkAnswers() {
    selected_options = 0;
    let current_question = questions[que_count];
    
    let correcAnswers = questions[que_count].answers; //getting correct answer from array
    const allOptions = option_list.children.length; //getting all option items
    for(i=0; i < allOptions; i++) {
        let option = option_list.children[i];

        if(correcAnswers.includes(option.textContent)) { //if there is an option which is matched to an array answer
            // TODO: add correct
            option.classList.add("correct"); //adding green color to correct selected option
            option.lastElementChild.insertAdjacentHTML("beforeend", tickIconTag); //adding tick icon to correct selected option
            console.log("Correct Answer");
            
        } else { // wrong answer
            // TODO : remove pencil 

            option.classList.add("incorrect"); //adding red color to correct selected option
            option.lastElementChild.insertAdjacentHTML("beforeend", crossIconTag); //adding cross icon to correct selected option
            console.log("Wrong Answer");
        }

        option.classList.add("disabled"); // disable all options
    }
}

function showResult() {

    info_box.classList.remove("activeInfo"); //hide info box
    quiz_box.classList.remove("activeQuiz"); //hide quiz box
    result_box.classList.add("activeResult"); //show result box
    const scoreText = result_box.querySelector(".score_text");

    if(userScore > 0){ // if user scored more than 0
        let reward = "";

        if (userScore == questions.length) {
            reward = "Congratulations &#129395; ! ";
        }
        scoreText.innerHTML = '<span>' + reward + 'You got <span>'+ userScore +'</span> out of <span>'+ questions.length +'</span> questions right.</span>';
    } else {

        scoreText.innerHTML = '<span>Sorry! You got <span>'+ userScore +'</span> out of <span>'+ questions.length +'</span> questions right. It\'s okay, try harder next time &#128521;.</span>';
    }

    if (!examFinished) {
        $(document).ready(function() {
            $.post("{{ path('answers_submit') }}", {score: userScore}, function( data ) {  
                alert(data); 
            })
            examFinished = true;
        });
    }
}

function startTimer(){
    time_line.style.width = "0px";

    timeLeft = timeValue;
    timeCount.textContent = timeLeft;
    
    countdownTask();

    counter = setInterval(countdownTask, 1000);

    function countdownTask(){

        if(timeLeft <= 9){
            timeCount.textContent = "0" + timeLeft; //add a 0 before time value

            if(timeLeft == 0){ //if timer is less than 0
                timeText.textContent = "Time Off"; //change the time text to time off

               // clearInterval(counterLine);
                clearInterval(counter); //clear counter
                // checkAnswers();
                ok_btn.click();
            }
        } else {
            timeCount.textContent = timeLeft;
        }

        time_line.style.width = ((widthValue/timeValue)*(timeValue-(timeLeft--))) + "px";
    }
    
}

function startTimerLine() {

    var perMs = Math.floor((timeValue*1000) / widthValue);
    time_line.style.width = 0;
    widthLeft = 0;

    var counterLine = setInterval(timerLine, perMs);

    function timerLine() {
        time_line.style.width = (++widthLeft) + "px"; //increasing width of time_line with px by time value

        if(widthLeft == widthValue){ //if time value is greater than 'widthValue'
            clearInterval(counterLine); //clear counterLine
        }

        console.log(widthLeft);
    }
}


// saving user data on Next, maybe using it on previous later.
function saveData() {
    let answers = [];
    let correctAnswers = questions[que_count].answers; //getting correct answer from array
    let win = correctAnswers.length;

    const allOptions = option_list.children.length; //getting all option items
    for(i=0; i < allOptions; i++) {
        var option = option_list.children[i]; 
        answers[i] = option.classList.contains("selected");

        // if selected wrong answer OR not selected correct answer
        var isCorrect = correctAnswers.includes(option.textContent);
        if((answers[i] && !isCorrect) || (!answers[i] && isCorrect)) {
            win--;
        }
        option.classList.add("disabled"); // disable all options
    }
    
    if (win == correctAnswers.length) {
        userScore += 1; //upgrading score value with 1
    }

    userData[que_count] = {timeLeft: timeLeft, widthLeft: widthLeft, answers: answers};
}

function loadData() {
    var userD = userData[que_count];

    timeLeft = userD.timeLeft;
    widthLeft = userD.widthLeft;

    const allOptions = userD.answers; //getting all option items
    for (i = 0; i < allOptions.length; i++) {

        var option = option_list.children[i];

        if (allOptions[i] == true) {
            option.classList.add("selected");
            option.lastElementChild.insertAdjacentHTML("beforeend", selectedIconTag);
        }

        option.classList.add("disabled"); // disable all options
    }

    if (timeLeft <= 9){
        timeCount.textContent = "0" + timeLeft; //add a 0 before time value
    } else {
        timeCount.textContent = timeLeft;
    }

    if (timeLeft == 0){ //if timer is less than 0
        timeText.textContent = "Time Off"; //change the time text to time off
    } else {
        timeText.textContent = "Time Left"; //change the time text to time off
    }
    
    //time_line.style.width = widthLeft + "px";
    time_line.style.width = ((widthValue/timeValue)*(timeValue-timeLeft)) + "px";
}


    </script>
{% endblock %}